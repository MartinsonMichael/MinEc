from django.db import models
from dbcontroller import model_support

def get_type_description(field):
    if isinstance(field, models.IntegerField):
        return 'Это целочисленное числовое поле. Для неинтервальных ' \
               'сравнений (<, >, =, >=, <=) нужно ввести одно целое число. ' \
               'Возможны интервальные сравнения, для этого введите диапазон в формате:' \
               '"xxx-xx", где x это цифры. Можно вводить несколько диапазонов через запятую ' \
               'и отдельные числа. Например "12,34-40,60-80". Пробелы не допускаются.'

    if isinstance(field, models.FloatField):
        return 'Это вещественное числовое поле. Для неинтервальных ' \
               'сравнений (<, >, =, >=, <=) нужно ввести одно число (точка как разделитель дробной части). ' \
               'Возможны интервальные сравнения, для этого введите диапазон в формате:' \
               '"xxx.xx-xx.x", где x это цифры. Можно вводить несколько диапазонов через запятую ' \
               'и отдельные числа. Например "12.43,34.0-40.0,60.5-80.5,123". Пробелы не допускаются.'

    if isinstance(field, models.BooleanField):
        return 'Это булевое поле. Оно поддерживает только точное сравнение (=) и может сравниваться с ' \
               'истинностью (выберете "Да") и ложью (выперете "Нет")'

    if isinstance(field, models.DateField):
        return 'Это поле формата даты. Для неинтервальных ' \
               'сравнений (<, >, =, >=, <=) нужно ввести одну дату в формате "ДД.ММ.ГГГГ". ' \
               'Возможны интервальные сравнения, для этого введите диапазон в формате:' \
               '"ДД.ММ.ГГГГ-ДД.ММ.ГГГГ", где x это цифры. Можно вводить несколько диапазонов через запятую ' \
               'и отдельные даты. Например "01.01.1970-01.12.1970,01.11.2019". Пробелы не допускаются.'

    if isinstance(field, models.TextField):
        return 'Это текстовое поле. Оно поддеживает только прямые (=) сравнения. ' \
               'Если при выборе этого поля в секции фильтров не появились автоподсказки ' \
               'с возможными значениями, то это поле имеент слишком много различных данных ' \
               'и им не рекомендуется пользоваться.\n' \
               'Если же опции появились выберете нужное количество нужных опций, к ним будет применено "ИЛИ"'

    return "Формат поля неизвестен."


name_mapper = {
    # company staff
    'inn': 'ИНН уникальный идентификатор компании.',
    'is_ip': 'Является ли человек индивидуальным предпринимателем. '
             'Значение "Да" (True) означает, что является ИП.',
    'short_title': 'Название компании, это поле отсутсвует у ИП.',
    'owner_name': 'ФИО владельца. Это поле есть только для ИП.',
    'company_category': 'Категория компании.',
    'location_code': 'Наименование региона нахождения компмнии.',
    'region_name': 'Код региона нахождения компании.',
    'federal_name': 'Наименование федерального субъекта нахождения компании.',

    # alive staff
    'date_create': 'Дата создания компании. '
                   '# Пока это поле невалидно! Базы из которого оно достается нет.',
    'date_disappear': 'Дата прекращения существования компании. '
                      'В данный момент комания считается прекратившей существование, '
                      'если при очередном обновлении базы данных компания не была найдена '
                      'в списке существующих компаний скаченном с сайта .',
    'still_alive': 'Логическое поле. Значение "Да" (True) означает, что компания еще существует.',
    'life_duration_years': 'Целое количество лет жизни компании. '
                           'Для еще существующих компаний постоянно обновляется',
    'disappear_factor': 'Причина прекращения существования.'
                    '# Пока это поле невалидно! Базы из которого оно достается нет.',

    # OKVED staff
    'okved_code': 'Код оквед. Код того, что предприятие делает.',
    'okved_code_name': 'Наименование оквед. Название того, что предприятие делает.',
    'okved_is_prime': 'Является ли данный оквед основным. '
                    'Значение "Да" (True) означает, что оквед является основным для компании.',

    # EmployeeNum staff
    'employee_num': 'Количество работников компании. Обновляется для еще существующих компаний.',

    # TaxBase staff
    'tax_atribute_0': 'Это один из видов налогов. ' + 'Задолженность и перерасчеты по ОТМЕНЕННЫМ НАЛОГАМ '
                                                      'и сборам и иным обязательным платежам  '
                                                      '(кроме ЕСН, страх. Взносов).',
    'tax_atribute_1': 'Это один из видов налогов. ' + 'Транспортный налог.',
    'tax_atribute_2': 'Это один из видов налогов. ' + 'Водный налог.',
    'tax_atribute_3': 'Это один из видов налогов. ' + 'Налог, взимаемый в связи с  применением упрощенной  '
                                                      'системы налогообложения.',
    'tax_atribute_4': 'Это один из видов налогов. ' + 'Налог на добавленную стоимость.',
    'tax_atribute_5': 'Это один из видов налогов. ' + 'Земельный налог.',
    'tax_atribute_6': 'Это один из видов налогов. ' + 'Акцизы, всего.',
    'tax_atribute_7': 'Это один из видов налогов. ' + 'НЕНАЛОГОВЫЕ ДОХОДЫ, администрируемые '
                                                      'налоговыми органами.',
    'tax_atribute_8': 'Это один из видов налогов. ' + 'Единый налог на вмененный доход для отдельных видов '
                                                      'деятельности.',
    'tax_atribute_9': 'Это один из видов налогов. ' + 'Налог на добычу полезных ископаемых.',
    'tax_atribute_10': 'Это один из видов налогов. ' + 'Страховые и другие взносы на обязательное '
                                                       'пенсионное страхование, зачисляемые в '
                                                       'Пенсионный фонд Российской Федерации.',
    'tax_atribute_11': 'Это один из видов налогов. ' + 'Страховые взносы на обязательное'
                                                       ' медицинское страхование работающего населения,'
                                                       ' зачисляемые в бюджет Федерального фонда '
                                                       'обязательного медицинского страхования.',
    'tax_atribute_12': 'Это один из видов налогов. ' + 'Налог на имущество организаций.',
    'tax_atribute_13': 'Это один из видов налогов. ' + 'Налог на прибыль.',
    'tax_atribute_14': 'Это один из видов налогов. ' + 'Торговый сбор.',
    'tax_atribute_15': 'Это один из видов налогов. ' + 'Налог на доходы физических лиц.',
    'tax_atribute_16': 'Это один из видов налогов. ' + 'Единый сельскохозяйственный налог.',
    'tax_atribute_17': 'Это один из видов налогов. ' + 'Сборы за пользование объектами '
                                                       'животного мира  и за пользование '
                                                       'объектами ВБР.',
    'tax_atribute_18': 'Это один из видов налогов. ' + 'Страховые взносы на обязательное социальное '
                                                       'страхование на случай временной '
                                                       'нетрудоспособности и в связи с материнством.',
    'tax_atribute_19': 'Это один из видов налогов. ' + 'Утилизационный сбор.',
    'tax_atribute_20': 'Налог на игорный бизнесс.',
    'tax_atribute_21': 'Это один из видов налогов. ' + 'Государственная пошлина.',
    'tax_atribute_22': 'Это один из видов налогов. ' + '',
    'tax_atribute_23': 'Это один из видов налогов. ' + '',
    'tax_atribute_24': 'Это один из видов налогов. ' + '',
    'tax_atribute_25': 'Это один из видов налогов. ' + '',
    'tax_atribute_26': 'Это один из видов налогов. ' + '',
    'tax_atribute_27': 'Это один из видов налогов. ' + '',
    'tax_atribute_28': 'Это один из видов налогов. ' + '',
    'tax_atribute_29': 'Это один из видов налогов. ' + '',

    # BaseIncome staff
    'income': 'Прибыль компании. ',
    'outcome': 'Расход компании. ',
}


def get_filed_name_description(field):
    if field.name in name_mapper.keys():
        return name_mapper[field.name]
    return "Поле неизвестно."


def get_description(field):
    return {
        'name_description': get_filed_name_description(field),
        'type_description': get_type_description(field),
    }


def get_all_description():
    descr = {}
    for field in model_support.iterate_over_visible_fields():
        descr[field.name] = get_description(field)
    return descr
