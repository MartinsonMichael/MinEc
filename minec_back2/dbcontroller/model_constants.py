from collections import defaultdict
from sqlalchemy import String, Boolean, Date, Integer, Float
from sqlalchemy_utils.types.choice import ChoiceType


REGION_TO_FEDERAL = defaultdict(lambda x: "НЕИЗВЕСТНО", {
 'белгородская область': 'Центральный федеральный округ',
 'брянская область': 'Центральный федеральный округ',
 'владимирская область': 'Центральный федеральный округ',
 'воронежская область': 'Центральный федеральный округ',
 'ивановская область': 'Центральный федеральный округ',
 'калужская область': 'Центральный федеральный округ',
 'костромская область': 'Центральный федеральный округ',
 'курская область': 'Центральный федеральный округ',
 'липецкая область': 'Центральный федеральный округ',
 'московская область': 'Центральный федеральный округ',
 'орловская область': 'Центральный федеральный округ',
 'рязанская область': 'Центральный федеральный округ',
 'смоленская область': 'Центральный федеральный округ',
 'тамбовская область': 'Центральный федеральный округ',
 'тверская область': 'Центральный федеральный округ',
 'тульская область': 'Центральный федеральный округ',
 'ярославская область': 'Центральный федеральный округ',
 'москва город': 'Центральный федеральный округ',
 'пермский край': 'Приволжский федеральный округ',
 'кировская область': 'Приволжский федеральный округ',
 'нижегородская область': 'Приволжский федеральный округ',
 'оренбургская область': 'Приволжский федеральный округ',
 'пензенская область': 'Приволжский федеральный округ',
 'самарская область': 'Приволжский федеральный округ',
 'саратовская область': 'Приволжский федеральный округ',
 'ульяновская область': 'Приволжский федеральный округ',
 'башкортостан республика': 'Приволжский федеральный округ',
 'марий эл республика': 'Приволжский федеральный округ',
 'мордовия республика': 'Приволжский федеральный округ',
 'татарстан республика': 'Приволжский федеральный округ',
 'удмуртская республика': 'Приволжский федеральный округ',
 'чувашская республика': 'Приволжский федеральный округ',
 'архангельская область': 'Северо-Западный федеральный округ',
 'вологодская область': 'Северо-Западный федеральный округ',
 'калининградская область': 'Северо-Западный федеральный округ',
 'ленинградская область': 'Северо-Западный федеральный округ',
 'мурманская область': 'Северо-Западный федеральный округ',
 'новгородская область': 'Северо-Западный федеральный округ',
 'псковская область': 'Северо-Западный федеральный округ',
 'карелия республика': 'Северо-Западный федеральный округ',
 'санкт-петербург город': 'Северо-Западный федеральный округ',
 'ненецкий автономный округ': 'Северо-Западный федеральный округ',
 'коми республика': 'Северо-Западный федеральный округ',
 'курганская область': 'Уральский федеральный округ',
 'свердловская область': 'Уральский федеральный округ',
 'тюменская область': 'Уральский федеральный округ',
 'челябинская область': 'Уральский федеральный округ',
 'ханты-мансийский автономный округ': 'Уральский федеральный округ',
 'ямало-ненецкий автономный округ': 'Уральский федеральный округ',
 'краснодарский край': 'Южный федеральный округ',
 'астраханская область': 'Южный федеральный округ',
 'волгоградская область': 'Южный федеральный округ',
 'ростовская область': 'Южный федеральный округ',
 'адыгея республика': 'Южный федеральный округ',
 'калмыкия республика': 'Северо-Кавказский федеральный округ',
 'крым республика': 'Южный федеральный округ',
 'севастополь город': 'Южный федеральный округ',
 'алтайский край': 'Сибирский федеральный округ',
 'иркутская область': 'Сибирский федеральный округ',
 'кемеровская область': 'Сибирский федеральный округ',
 'новосибирская область': 'Сибирский федеральный округ',
 'омская область': 'Сибирский федеральный округ',
 'томская область': 'Сибирский федеральный округ',
 'тыва республика': 'Сибирский федеральный округ',
 'хакасия республика': 'Сибирский федеральный округ',
 'красноярский край': 'Сибирский федеральный округ',
 'алтай республика': 'Сибирский федеральный округ',
 'ставропольский край': 'Северо-Кавказский федеральный округ',
 'дагестан республика': 'Северо-Кавказский федеральный округ',
 'ингушетия республика': 'Северо-Кавказский федеральный округ',
 'северная осетия': 'Северо-Кавказский федеральный округ',
 'чеченская республика': 'Северо-Кавказский федеральный округ',
 'кабардино-балкарская республика': 'Северо-Кавказский федеральный округ',
 'карачаево-черкесская республика': 'Северо-Кавказский федеральный округ',
 'забайкальский край': 'Дальневосточный федеральный округ',
 'камчатский край': 'Дальневосточный федеральный округ',
 'приморский край': 'Дальневосточный федеральный округ',
 'хабаровский край': 'Дальневосточный федеральный округ',
 'амурская область': 'Дальневосточный федеральный округ',
 'магаданская область': 'Дальневосточный федеральный округ',
 'сахалинская область': 'Дальневосточный федеральный округ',
 'бурятия республика': 'Дальневосточный федеральный округ',
 'еврейская автономная область': 'Дальневосточный федеральный округ',
 'чукотский автономный округ': 'Дальневосточный федеральный округ',
 'саха - якутия республика': 'Дальневосточный федеральный округ'
})

LOCATION_TYPES = {
    'город',
    'городской округ',
    'дачный поселок',
    'деревня',
    'железнодорожная станция',
    'квартал',
    'край',
    'область',
    'поселение',
    'поселок',
    'поселок городского типа',
    'рабочий поселок',
    'район',
    'республика',
    'село',
    'станция'
}


COMPANY_TYPE = defaultdict(lambda: 'тип не определн', dict([
    (0, 'тип не определн'),
    (1, 'микропредприятие'),
    (2, 'малое предприятие'),
    (3, 'среднее предприятие')
]))


REGION_TYPES = defaultdict(lambda: 'НЕИЗВЕСТНО', {
 1: 'адыгея республика',
 2: 'башкортостан республика',
 3: 'бурятия республика',
 4: 'алтай республика',
 5: 'дагестан республика',
 6: 'ингушетия республика',
 7: 'кабардино-балкарская республика',
 8: 'калмыкия республика',
 9: 'карачаево-черкесская республика',
 10: 'карелия республика',
 11: 'коми республика',
 12: 'марий эл республика',
 13: 'мордовия республика',
 14: 'саха - якутия республика',
 15: 'северная осетия',
 16: 'татарстан республика',
 17: 'тыва республика',
 18: 'удмуртская республика',
 19: 'хакасия республика',
 20: 'чеченская республика',
 21: 'чувашская республика',
 22: 'алтайский край',
 23: 'краснодарский край',
 24: 'красноярский край',
 25: 'приморский край',
 26: 'ставропольский край',
 27: 'хабаровский край',
 28: 'амурская область',
 29: 'архангельская область',
 30: 'астраханская область',
 31: 'белгородская область',
 32: 'брянская область',
 33: 'владимирская область',
 34: 'волгоградская область',
 35: 'вологодская область',
 36: 'воронежская область',
 37: 'ивановская область',
 38: 'иркутская область',
 39: 'калининградская область',
 40: 'калужская область',
 41: 'камчатский край',
 42: 'кемеровская область',
 43: 'кировская область',
 44: 'костромская область',
 45: 'курганская область',
 46: 'курская область',
 47: 'ленинградская область',
 48: 'липецкая область',
 49: 'магаданская область',
 50: 'московская область',
 51: 'мурманская область',
 52: 'нижегородская область',
 53: 'новгородская область',
 54: 'новосибирская область',
 55: 'омская область',
 56: 'оренбургская область',
 57: 'орловская область',
 58: 'пензенская область',
 59: 'пермский край',
 60: 'псковская область',
 61: 'ростовская область',
 62: 'рязанская область',
 63: 'самарская область',
 64: 'саратовская область',
 65: 'сахалинская область',
 66: 'свердловская область',
 67: 'смоленская область',
 68: 'тамбовская область',
 69: 'тверская область',
 70: 'томская область',
 71: 'тульская область',
 72: 'тюменская область',
 73: 'ульяновская область',
 74: 'челябинская область',
 75: 'забайкальский край',
 76: 'ярославская область',
 77: 'москва город',
 78: 'санкт-петербург город',
 79: 'еврейская автономная область',
 81: 'пермский край',
 83: 'ненецкий автономный округ',
 85: 'иркутская область',
 86: 'ханты-мансийский автономный округ',
 87: 'чукотский автономный округ',
 89: 'ямало-ненецкий автономный округ',
 91: 'крым республика',
 92: 'севастополь город',
})


REGION_NAME_TO_NUMBER = defaultdict(lambda x: 99, {value: key for key, value in REGION_TYPES.items()})


FEDERAL_TYPES = defaultdict(lambda x: "НЕИЗВЕСТНО", {
 index: x for index, x in enumerate(set(REGION_TO_FEDERAL.values()))
})


FEDERAL_NAME_TO_NUMBER = defaultdict(lambda x: 99, {value: key for key, value in FEDERAL_TYPES.items()})


TAX_NAME_TO_ATTRIBUTE = defaultdict(lambda: 'tax_attribute_99', {
 'Задолженность и перерасчеты по ОТМЕНЕННЫМ НАЛОГАМ  и сборам и иным обязательным платежам  (кроме ЕСН, страх. Взносов)': 'tax_attribute_0',
 'Транспортный налог': 'tax_attribute_1',
 'Водный налог': 'tax_attribute_2',
 'Налог, взимаемый в связи с  применением упрощенной  системы налогообложения': 'tax_attribute_3',
 'Налог на добавленную стоимость': 'tax_attribute_4',
 'Земельный налог': 'tax_attribute_5',
 'Акцизы, всего': 'tax_attribute_6',
 'НЕНАЛОГОВЫЕ ДОХОДЫ, администрируемые налоговыми органами': 'tax_attribute_7',
 'Единый налог на вмененный доход для отдельных видов  деятельности': 'tax_attribute_8',
 'Налог на добычу полезных ископаемых': 'tax_attribute_9',
 'Страховые и другие взносы на обязательное пенсионное страхование, зачисляемые в Пенсионный фонд Российской Федерации': 'tax_attribute_10',
 'Страховые взносы на обязательное медицинское страхование работающего населения, зачисляемые в бюджет Федерального фонда обязательного медицинского страхования': 'tax_attribute_11',
 'Налог на имущество организаций': 'tax_attribute_12',
 'Налог на прибыль': 'tax_attribute_13',
 'Торговый сбор': 'tax_attribute_14',
 'Налог на доходы физических лиц': 'tax_attribute_15',
 'Единый сельскохозяйственный налог': 'tax_attribute_16',
 'Сборы за пользование объектами животного мира  и за пользование объектами ВБР': 'tax_attribute_17',
 'Страховые взносы на обязательное социальное страхование на случай временной нетрудоспособности и в связи с материнством': 'tax_attribute_18',
 'Утилизационный сбор': 'tax_attribute_19',
 'Налог на игорный': 'tax_attribute_20',
 'Государственная пошлина': 'tax_attribute_21',
})


TABLES_COLUMN_MACHINE_TO_HUMAN_DESCRIPTION = defaultdict(lambda: '???', {
    # company staff
    'inn': 'ИНН уникальный идентификатор компании.',
    'is_ip': 'Является ли человек индивидуальным предпринимателем. '
             'Значение "Да" (True) означает, что является ИП.',
    'short_title': 'Название компании, это поле отсутсвует у ИП.',
    'owner_name': 'ФИО владельца. Это поле есть только для ИП.',
    'company_category': 'Категория компании.',
    'region_code': 'Наименование региона нахождения компмнии.',
    'region_name': 'Код региона нахождения компании.',
    'federal_name': 'Наименование федерального субъекта нахождения компании.',

    # alive staff
    'date_create': 'Дата создания компании. '
                   '# Пока это поле невалидно! Базы из которого оно достается нет.',
    'date_disappear': 'Дата прекращения существования компании. '
                      'В данный момент комания считается прекратившей существование, '
                      'если при очередном обновлении базы данных компания не была найдена '
                      'в списке существующих компаний скаченном с сайта .',
    'still_alive': 'Логическое поле. Значение "Да" (True) означает, что компания еще существует.',
    'life_duration_years': 'Целое количество лет жизни компании. '
                           'Для еще существующих компаний постоянно обновляется',
    'disappear_factor': 'Причина прекращения существования.'
                    '# Пока это поле невалидно! Базы из которого оно достается нет.',

    # OKVED staff
    'okved_code': 'Код оквед. Код того, что предприятие делает.',
    'okved_code_name': 'Наименование оквед. Название того, что предприятие делает.',
    'okved_is_prime': 'Является ли данный оквед основным. '
                    'Значение "Да" (True) означает, что оквед является основным для компании.',

    # EmployeeNum staff
    'employee_num': 'Количество работников компании. Обновляется для еще существующих компаний.',

    # TaxBase staff
    'tax_attribute_0': 'Это один из видов налогов. ' + 'Задолженность и перерасчеты по ОТМЕНЕННЫМ НАЛОГАМ '
                                                      'и сборам и иным обязательным платежам  '
                                                      '(кроме ЕСН, страх. Взносов).',
    'tax_attribute_1': 'Это один из видов налогов. ' + 'Транспортный налог.',
    'tax_attribute_2': 'Это один из видов налогов. ' + 'Водный налог.',
    'tax_attribute_3': 'Это один из видов налогов. ' + 'Налог, взимаемый в связи с  применением упрощенной  '
                                                      'системы налогообложения.',
    'tax_attribute_4': 'Это один из видов налогов. ' + 'Налог на добавленную стоимость.',
    'tax_attribute_5': 'Это один из видов налогов. ' + 'Земельный налог.',
    'tax_attribute_6': 'Это один из видов налогов. ' + 'Акцизы, всего.',
    'tax_attribute_7': 'Это один из видов налогов. ' + 'НЕНАЛОГОВЫЕ ДОХОДЫ, администрируемые '
                                                      'налоговыми органами.',
    'tax_attribute_8': 'Это один из видов налогов. ' + 'Единый налог на вмененный доход для отдельных видов '
                                                      'деятельности.',
    'tax_attribute_9': 'Это один из видов налогов. ' + 'Налог на добычу полезных ископаемых.',
    'tax_attribute_10': 'Это один из видов налогов. ' + 'Страховые и другие взносы на обязательное '
                                                       'пенсионное страхование, зачисляемые в '
                                                       'Пенсионный фонд Российской Федерации.',
    'tax_attribute_11': 'Это один из видов налогов. ' + 'Страховые взносы на обязательное'
                                                       ' медицинское страхование работающего населения,'
                                                       ' зачисляемые в бюджет Федерального фонда '
                                                       'обязательного медицинского страхования.',
    'tax_attribute_12': 'Это один из видов налогов. ' + 'Налог на имущество организаций.',
    'tax_attribute_13': 'Это один из видов налогов. ' + 'Налог на прибыль.',
    'tax_attribute_14': 'Это один из видов налогов. ' + 'Торговый сбор.',
    'tax_attribute_15': 'Это один из видов налогов. ' + 'Налог на доходы физических лиц.',
    'tax_attribute_16': 'Это один из видов налогов. ' + 'Единый сельскохозяйственный налог.',
    'tax_attribute_17': 'Это один из видов налогов. ' + 'Сборы за пользование объектами '
                                                       'животного мира  и за пользование '
                                                       'объектами ВБР.',
    'tax_attribute_18': 'Это один из видов налогов. ' + 'Страховые взносы на обязательное социальное '
                                                       'страхование на случай временной '
                                                       'нетрудоспособности и в связи с материнством.',
    'tax_attribute_19': 'Это один из видов налогов. ' + 'Утилизационный сбор.',
    'tax_attribute_20': 'Налог на игорный бизнесс.',
    'tax_attribute_21': 'Это один из видов налогов. ' + 'Государственная пошлина.',
    'tax_attribute_22': 'Это один из видов налогов. ' + '',
    'tax_attribute_23': 'Это один из видов налогов. ' + '',
    'tax_attribute_24': 'Это один из видов налогов. ' + '',
    'tax_attribute_25': 'Это один из видов налогов. ' + '',
    'tax_attribute_26': 'Это один из видов налогов. ' + '',
    'tax_attribute_27': 'Это один из видов налогов. ' + '',
    'tax_attribute_28': 'Это один из видов налогов. ' + '',
    'tax_attribute_29': 'Это один из видов налогов. ' + '',
    'tax_attribute_99': 'Неизвестный вид налога (на момент написания программы не существовал)',

    # BaseIncome staff
    'income': 'Прибыль компании. ',
    'outcome': 'Расход компании. ',
})


def get_TABLES_COLUMN_MACHINE_TO_HUMAN_DESCRIPTION(column_name: str) -> str:
    if column_name in TABLES_COLUMN_MACHINE_TO_HUMAN_DESCRIPTION.keys():
        return TABLES_COLUMN_MACHINE_TO_HUMAN_DESCRIPTION[column_name]
    return column_name


TABLES_COLUMN_MACHINE_TO_HUMAN_NAME = defaultdict(lambda: '???', {
    # company staff
    'inn': 'ИНН',
    'inn_company': 'ИНН',
    'inn_taxes': 'ИНН',
    'inn_income': 'ИНН',
    'inn_employee': 'ИНН',
    'inn_okved': 'ИНН',

    'upd_date': 'дата обновления',
    'upd_date_company': 'дата обновления',
    'upd_date_taxes': 'дата обновления',
    'upd_date_income': 'дата обновления',
    'upd_date_employee': 'дата обновления',
    'upd_date_okved': 'дата обновления',
    
    'is_ip': 'является ли ИП?',
    'short_title': 'краткое название компании',
    'owner_name': 'ФИО владельца',
    'company_category': 'категория компании',
    'region_name': 'наименование региона',
    'region_code': 'код региона',
    'federal_name': 'федеральный субъект',

    # alive staff
    # 'date_create': 'дата создания. ',
    # 'date_disappear': 'Дата прекращения существования компании. '
    #                   'В данный момент комания считается прекратившей существование, '
    #                   'если при очередном обновлении базы данных компания не была найдена '
    #                   'в списке существующих компаний скаченном с сайта .',
    # 'still_alive': 'Логическое поле. Значение "Да" (True) означает, что компания еще существует.',
    # 'life_duration_years': 'Целое количество лет жизни компании. '
    #                        'Для еще существующих компаний постоянно обновляется',
    # 'disappear_factor': 'Причина прекращения существования.'
    #                 '# Пока это поле невалидно! Базы из которого оно достается нет.',

    # OKVED staff
    'okved_code': 'код оквед',
    'okved_title': 'наименование оквед',
    'okved_is_prime': 'оквед основной?',

    # EmployeeNum staff
    'employee_num': 'количество работников',

    # TaxBase staff
    'tax_attribute_0': 'задолженность и перерасчеты по ОТМЕНЕННЫМ НАЛОГАМ',
    'tax_attribute_1': 'транспортный налог',
    'tax_attribute_2': 'Водный налог',
    'tax_attribute_3': 'налог по упрощенной системе',
    'tax_attribute_4': 'налог на добавленную стоимость.',
    'tax_attribute_5': 'земельный налог.',
    'tax_attribute_6': 'акцизы, всего.',
    'tax_attribute_7': 'НЕНАЛОГОВЫЕ ДОХОДЫ, администрируемые',
    'tax_attribute_8': 'единый налог на вмененный доход для отдельных видов деятельности',
    'tax_attribute_9': 'налог на добычу полезных ископаемых.',
    'tax_attribute_10': 'взносы зачисляемые в Пенсионный фонд',
    'tax_attribute_11': 'взносы на медицинское страхование работающего населения',
    'tax_attribute_12': 'налог на имущество организаций',
    'tax_attribute_13': 'налог на прибыль',
    'tax_attribute_14': 'торговый сбор',
    'tax_attribute_15': 'налог на доходы физических лиц',
    'tax_attribute_16': 'сельскохозяйственный налог.',
    'tax_attribute_17': 'сборы за пользование объектами животного мира',
    'tax_attribute_18': 'cтраховые взносы на случай материнства',
    'tax_attribute_19': 'утилизационный сбор',
    'tax_attribute_20': 'Налог на игорный бизнесс',
    'tax_attribute_21': 'Государственная пошлина',

    # BaseIncome staff
    'income': 'прибыль',
    'outcome': 'расход',
})


def get_TABLES_COLUMN_MACHINE_TO_HUMAN_NAME(column_name: str) -> str:
    if column_name in TABLES_COLUMN_MACHINE_TO_HUMAN_NAME.keys():
        return TABLES_COLUMN_MACHINE_TO_HUMAN_NAME[column_name]
    return column_name


COLUMN_TYPE_TO_NAME = defaultdict(lambda: "unknown_column_type", {
    String: 'text',
    Boolean: 'bool',
    Integer: 'number',
    Float: 'number',
    Date: 'date',
    ChoiceType: 'multi',
})
